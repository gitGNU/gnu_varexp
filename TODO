                              libvar.a

 - Prefix ist "var_", beziehungsweise "VAR_".

 - Eine Variable kann im Text in der Form $name oder ${name} angegeben
   werden, wobei die Wahl der Klammern '{' '}' und des '$'
   parametriesiert werden können.

 - Gültige Zeichen für einen Variablennamen sind konfigurierbar.
   Garbage in -- garbage out.

 - Ein echtes '$'-Zeichen im Text kann durch Voranstellung eines
   wählbaren Escapezeichen dargestellt werden. Default ist der
   Backslash ('\').

 - Der Aufrufer der Funktion soll steuern können, wie sich die Library
   verhält, wenn eine Variable nicht existiert. Denkbar sind:

    - Abbruch mit Fehler,
    - die Variable wird zu "", oder
    - der Ausdruck wird unverändert in den Ausgabetext übernommen,
      sodaß eventuell ein zweiter Pass gemacht werden kann.

 - ${parameter:-word} wird normal expandiert. Wenn "parameter" leer
   ist, wird stattdessen "word" eingesetzt.

 - ${parameter:?word} wird normal expandiert. Wenn "parameter" leer
   ist, bricht die Verarbeitung mit Fehler ab und "word" wird als
   Begründung zurückgegeben.

 - ${parameter:+word} substituiert die Expansion von "${word}" wenn
   "parameter" nicht leer ist, sonst wird "" substituiert.

 - ${parameter:o<start>-}, ${parameter:o<start>-<end>}

 - ${parameter:o<start>,}, ${parameter:o<start>,<length>}

 - ${parameter:#} expandiert zur Länge des Inhaltes von "parameter".

 - ${parameter:s/pattern/string/[gti]} expandiert "parameter" und
   führt dann eine Ersetzung mittels des regulären Ausdrucks "pattern"
   durch. Wird das 'g'-Flag angegeben, wird nicht nur eine Instanz von
   "pattern" durch "string" ersetzt, sondern alle. Das 't'-Flag
   signalisiert, daß eine reine Text-Ersetzung ohne Unterstützung von
   regulären Ausdrücken gewünscht ist. Das 'i'-Flag besagt, daß die
   Suche nach "pattern" case-insensitiv durchgeführt wird.

 - ${parameter:y/ochars/nchars/} expandiert den Inhalt von "parameter"
   und transformiert dabei nach dem Prinzip von tr(1) die "ochars" im
   Text zu "nchars".

 - ${parameter:l} wandelt den Inhalt von "parameter" in
   Kleinbuchstaben, bevor es die Variable expandiert. Dies geschieht
   über toupper(3).

 - ${parameter:u} wandelt den Inhalt von "parameter" in
   Großbuchstaben, bevor es die Variable expandiert. Dies geschieht
   über tolower(3).

 - ${parameter:*word} expandiert zum leeren Wort, wenn "parameter"
   nicht leer ist, sonst zu "word".

 - Jedes Vorkommen eines der folgenden Konstrukte im Text wird durch
   das zugehörige Sonderzeichen ersetzt.

       \t          tab
       \n          newline
       \r          return
       \033        octal char
       \x1B        hex char
       \x{263a}    wide hex char

 - Syntax:

    input           : ( TEXT | variable )*

    variable        : '$' ( name | expression )

    expression      : START-DELIM ( name | variable )+ ( ':' command )* END-DELIM

    name            : ( VARNAME | SPECIAL1 | SPECIAL2 )+

    command         : '-' ( EXPTEXT | variable )*
                    | '?' ( EXPTEXT | variable )*
                    | '+' ( EXPTEXT | variable )*
                    | 'o' ( NUMBER '-' ( NUMBER )? | NUMBER ',' ( NUMBER )? )
                    | '#'
                    | '*' ( EXPTEXT | variable )*
                    | 's' '/' ( variable | SUBSTTEXT ) '/' ( variable | SUBSTTEXT ) '/' ( 'g' | 'i' | 't' )*
                    | 'y' '/' ( variable | SUBSTTEXT ) '/' ( variable | SUBSTTEXT ) '/'
                    | 'l'
                    | 'u'

    START-DELIM     : '{'

    END-DELIM       : '}'

    VARNAME         : '[a-zA-Z0-9_]+'

    SPECIAL1        : '['

    SPECIAL2        : ']'

    NUMBER          : '[0-9]+'

    SUBSTTEXT       : '[^$/]'

    EXPTEXT         : '[^$}:]+'

    TEXT            : '[^$]+'

 - Doku sollte ein Beispiel für Quoting von Shell- und
   Regexp-Ausdrücken enthalten.

 - Wir unterstützen PCRE-, POSIX-Regex- oder keine regulären
   Ausdrücke. Dies kann über autoconf zur Compilezeit angegeben
   werden.
