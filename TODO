                              libvarexp

 - Eine Variable kann im Text in der Form $name oder $(name) angegeben
   werden, wobei die Wahl der Klammern '(' ')' und des '$'
   parametriesiert werden können.

 - Der tatsächliche Lookup des Inhaltes der Variable geschieht über
   eine Callback-Funktion.

 - Gültige Zeichen für einem Variablennamen sind: [a-z0-9_].

 - In der Form $name muß ein Zeichen folgen, daß nicht zu einem
   Variablennamen gehören darf, um das Ende des Namens feststellen zu
   können.

 - Ein echtes '$'-Zeichen im Text kann durch Voranstellung eines
   wählbaren Escapezeichen dargestellt werden.

 - Kann eine Variable nicht expandiert werden, so entscheidet der
   Callback: Gibt er "" zurück, wird die Variable durch den leeren
   String ersetzt, gibt er NULL zurück, bricht die Verarbeitung mit
   einem Fehler ab.

 - ${parameter} wird zum Inhalt der Variable "parameter".

 - ${!parameter} wird erst durch den Inhalt von "parameter" ersetzt
   und dann erneut expandiert.

 - ${parameter:-word} wird normal expandiert. Wenn "parameter" leer
   ist, wird stattdessen "word" eingesetzt.

 - ${parameter:?word} wird normal expandiert. Wenn "parameter" leer
   ist, bricht die Verarbeitung mit Fehler ab und "word" wird als
   Begründung zurückgegeben.

 - ${parameter:+word} substituiert die Expansion von "${word}" wenn
   "parameter" nicht leer ist, sonst wird "" substituiert.

 - ${parameter:offset} und ${parameter:offset:length} substituiert den
   Inhalt von "parameter" ab Zeichen "offset" bis zum Ende oder (in
   der zweiten Form) die nächsten "length" Zeichen.

 - ${#parameter} expandiert zur Länge des Inhaltes von "parameter".

 - ${parameter#word} expandiert zum Inhalt von "parameter" schneidet
   jedoch ein Prefix ab, das "word" entspricht. "word" kann wieder
   eine Variable sein.

 - ${parameter%word} expandiert zum Inhalt von "parameter" schneidet
   jedoch ein Suffix ab, das "word" entspricht. "word" kann wieder
   eine Variable sein.

 - ${parameter/pattern/string} expandiert "parameter" und ersetzt dann
   das erste Vorkommen von "pattern" durch "string". Beide Werte
   können wiederum Variablen sein.

 - ${parameter/pattern/string} expandiert "parameter" und ersetzt dann
   alle Vorkommen von "pattern" durch "string". Beide Werte können
   wiederum Variablen sein.

 - ${parameter:S/pattern/string/} expandiert "parameter" und führt
   dann eine Ersetzung mittels des regulären Ausdrucks "pattern"
   durch, wobei das Ergebnis durch "string" dargestellt wirde

 - ${parameter:S/pattern/string/1} ist synonym zu
   ${parameter:S/pattern/string/}.

 - ${parameter:S/pattern/string/g} verhält sich wie der vorherige
   Ausdruck, ersetzte aber _alle_ Vorkommen von "pattern".

 - ${parameter:C/pattern/string/} und ${parameter:c/pattern/string/g}
   sind synonym zu ${parameter:S/pattern/string/} und
   ${parameter:S/pattern/string/g}.

 - ${parameter:E} ersetzt jedes Wort in "parameter" durch sein Suffix.
   Worte ohne Suffix werden dementsprechend zum leeren Wort.

 - ${parameter:H} schneidet bei jedem Wort in "parameter" die letzte
   Komponente des Pfades heraus. Aus "foo/bar" wird "foo", aus "foo"
   würde bei erneuter Anwendung "." werden.

 - ${parameter:L} wandelt den Inhalt von "parameter" in
   Kleinbuchstaben, bevor es die Variable expandiert.

 - ${parameter:Mpattern} expandiert zu allen Wörtern in "parameter",
   die dem Shell-Pattern "pattern" entsprechen.

 - ${parameter:Npattern} expandiert zu allen Wörtern in "parameter",
   die dem Shell-Pattern "pattern" nicht entsprechen.

 - ${parameter:Q} escaped for der Expansion alle Shell-Meta-Zeichen.

 - ${parameter:R} entfernt vor der Expansion das Suffix jedes Wortes
   in "parameter". "test.c" wird zu "test" und "test.c.c" würde zu
   "test.c".

 - ${parameter:R} entfernt vor der Expansion die jedem Wort
   vorangestellten Pfadinformationen. Aus "test/foo" wird so "foo".

 - ${parameter:old=new} ersetzt jedem Wort die Zeichenfolge "old"
   durch "new", wobei angenommen wird, daß "old" nur von hinten an
   jedes Wort angelegt wird, also nur Suffixe oder ganze Worte ersetzt
   werden. Alternativ kann in "old" und "new" der Joker '%' angegeben
   werden:

    TEST=test.foo   $(TEST:foo=bar)     --> test.bar
    TEST=test.foo   $(TEST:test.%=bar)  --> foobar
    TEST=test.foo   $(TEST:test.%=bar%) --> barfoo

 - ${parameter:U} wandelt den Inhalt von "parameter" in
   Großbuchstaben, bevor es die Variable expandiert.

 - ${parameter:*word} expandiert zum leeren Wort, wenn "parameter"
   nicht leer ist.

 - Nicht unterstützt werden:

       ${name=string}
       ${parameter:=word}
       ${!prefix*}
       ${parameter##word}
       ${parameter%%word}
